var IdoShare = (function(){
  if(typeof window.console === 'undefined'){
    window.console = {log: function(){return false;}};
  }

/*
* 
* TODO mixpanel old async library?
*
*/

  var auth_token = '<%= @auth_token.token  %>'
      ,endpoint_url = '//<%= request.host%><%= (request.port == 80) ? '' : ":#{request.port}" %><%= events_path %>.json'
      ,protocol = (document.location.protocol == 'https:' ? 'https:' : 'http:')
      ,all_deps = false
      ,async_log = []
      ,returned_api = {}
      ,api_inaction = false
      ,true_api = {
	  push: push
      }
      ;  


  function push(event_obj){
      var tag = document.createElement("script");
      tag.type = "text/javascript"; 
      tag.async = true;
      tag.defer = true;
      tag.src = protocol + endpoint_url+"?umi_token="+auth_token+"&event="+encodeURIComponent(JSON.stringify(event_obj));
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(tag, s);
  }

  
  function checkForGA(){
    if(typeof window._gaq == 'undefined'){
	return false;
    }

    if(window._gaq.push != [].push){
	var old_meth = window._gaq.push
	window._gaq.push = function(){
	    var ido_event = {
		category: arguments[0][1]
		,name: arguments[0][2]
		,data : {
		    label: arguments[0][3]
		    ,value: arguments[0][4]
		}
	    };
	    
	    if(api_inaction = true){
		push(ido_event);
            }else{
		async_log.push(['push', ido_event]);
	    }
	    old_meth.apply(window._gaq, arguments);
	}
    }
  }


  function checkForMP(){
    var mp_api, old_meth;

    if(typeof window.mpq != 'undefined'){
	mp_api = window.mpq
    }else if(typeof window.mixpanel != 'undefined'){
	mp_api = window.mixpanel
    }else{
	return false;
    }

    if(typeof mp_api.track != 'undefined'){
	var old_meth = mp_api.track;
	mp_api.track = function(){
	    var ido_event = {
		category: "WebMetric"
		,name: arguments[0]
		,data : arguments[1]
	    };

	    if(api_inaction = true){
		push(ido_event);
            }else{
		async_log.push(['push', ido_event]);
	    }
	    old_meth.apply(window.mixpanel, arguments);
        }
    }

  }

  checkForGA();
  checkForMP();

  function loadDepJs(dep_url, cb){
    var s=document.createElement('script');
    s.setAttribute('type', "text/javascript");
    s.setAttribute('src', dep_url);
    head.appendChild(s);
    s.onload = function(){
      if(typeof cb === 'function'){
        cb();
      }
      scriptOnLoad();
    };

    s.onreadystatechange = function () {
      if (this.readyState === 'complete' || this.readyState === 'loaded'){
        if(typeof cb === 'function'){
          cb();
        }
        scriptOnLoad();
      }
    };
  }


  function executeBackLog(){
      if(api_inaction === false){
	  api_inaction = true;
	  var i;
	  for(i = 0; i<async_log.length; i++){
	      //call the method with given arguments
	      true_api[async_log[i][0]].apply(true_api, async_log[i][1]);	      
	  }
	  async_log = [];
      }
  }
   
  function returnTrueApi(){
    for(var value in true_api){
      returned_api[value] = true_api[value];
    }
    executeBackLog();
  }
   
   
  function scriptOnLoad(){
    if(typeof JSON === "undefined" || !JSON){
      return;
    }

    all_deps = true;
    if(api_inaction === false){
	returnTrueApi();
    }	
  }



  //If there is no jquery on the page load the latest
  if(typeof window.JSON === 'undefined' || !JSON){
    loadDepJs(protocol+'//cloudfuji.com/javascripts/easyXDM-2.4.15.118/json2.js');
  } 


  //call the onload incase all dependencies are met.
  scriptOnLoad();
      
  /*
   *
   * Return an api, depends on if dependencys are loaded or not
   *
   */
  return (function(){
    if(all_deps === true){
      return true_api;
    }else{
      for(prop in true_api){ (function(prop){
        returned_api[prop] = function(){
          async_log.push([prop, arguments]);
        };
      }(prop)); }
      return returned_api;
    }
  }());


})();
